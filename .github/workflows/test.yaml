name: Test Chart

on:
  push:

permissions:
  id-token: write
  contents: write  # Grant write access to the repository contents

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - mode: Sensor
            extraArgs: "--set ebsCsiProxy.enabled=false"

          - mode: AutoScaler
            extraArgs: ""

    name: Test (${{ matrix.mode }} with ${{ matrix.extraArgs }})

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4.3.1

      - name: Add required Helm repos
        run: |
          helm repo add aws-ebs-csi-driver https://kubernetes-sigs.github.io/aws-ebs-csi-driver
          helm repo update

      - uses: actions/setup-python@v5.3.0
        with:
          python-version: '3.x'
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.7.0

      - name: Run chart-testing (lint)
        run: ct lint --charts . --config .ct.yaml --target-branch ${{ github.event.repository.default_branch }}

      - name: Detect related PR
        id: detect_pr
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
        run: |
          set -e
          owner_repo="$REPO"
          # List open PRs whose head matches owner:branch
            json=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
              "https://api.github.com/repos/$owner_repo/pulls?state=open&head=${owner_repo%%/*}:$BRANCH")
          count=$(echo "$json" | jq 'length')
          if [ "$count" -gt 0 ]; then
            # take first
            draft=$(echo "$json" | jq '.[0].draft')
            number=$(echo "$json" | jq '.[0].number')
            echo "Found open PR #$number (draft=$draft)"
            echo "has_pr=true" >> "$GITHUB_OUTPUT"
          else
            echo "No open PR for branch $BRANCH"
            echo "has_pr=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create kind cluster
        if: ${{ steps.detect_pr.outputs.has_pr == 'true' }}
        uses: helm/kind-action@v1.12.0

      - name: Apply fake EBS CSI resources
        if: ${{ steps.detect_pr.outputs.has_pr == 'true' }}
        run: |
          set -euo pipefail
          cat <<'YAML' | kubectl apply -f -
          apiVersion: storage.k8s.io/v1
          kind: CSIDriver
          metadata:
            name: ebs.csi.aws.com
          spec:
            attachRequired: true
            podInfoOnMount: true
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ebs-csi-controller
            namespace: kube-system
            labels:
              app.kubernetes.io/name: ebs-csi-controller
              app.kubernetes.io/version: "v0.0.0-fake"
          spec:
            replicas: 1
            selector:
              matchLabels:
                app.kubernetes.io/name: ebs-csi-controller
            template:
              metadata:
                labels:
                  app.kubernetes.io/name: ebs-csi-controller
                  app.kubernetes.io/version: "v0.0.0-fake"
              spec:
                containers:
                  - name: ebs-plugin
                    image: public.ecr.aws/docker/library/busybox:latest
                    command: ["sh","-c"]
                    args:
                      - |
                        mkdir -p /csi && mknod /csi/csi.sock p || true
                        while true; do sleep 3600; done
                    env:
                      - name: CSI_ENDPOINT
                        value: "unix:///csi/csi.sock"
                    volumeMounts:
                      - name: socket-dir
                        mountPath: /csi
                volumes:
                  - name: socket-dir
                    emptyDir: {}
          ---
          apiVersion: apps/v1
          kind: DaemonSet
          metadata:
            name: ebs-csi-node
            namespace: kube-system
            labels:
              app.kubernetes.io/name: ebs-csi-node
              app.kubernetes.io/version: "v0.0.0-fake"
          spec:
            selector:
              matchLabels:
                app.kubernetes.io/name: ebs-csi-node
            template:
              metadata:
                labels:
                  app.kubernetes.io/name: ebs-csi-node
                  app.kubernetes.io/version: "v0.0.0-fake"
              spec:
                containers:
                  - name: ebs-plugin
                    image: public.ecr.aws/docker/library/busybox:latest
                    securityContext:
                      privileged: true
                      readOnlyRootFilesystem: false
                    command: ["sh","-c"]
                    args:
                      - |
                        mkdir -p /csi && mknod /csi/csi.sock p || true
                        while true; do sleep 3600; done
                    env:
                      - name: CSI_ENDPOINT
                        value: "unix:///csi/csi.sock"
                    volumeMounts:
                      - name: socket-dir
                        mountPath: /csi
                      - name: kubelet-dir
                        mountPath: /var/lib/kubelet
                        mountPropagation: Bidirectional
                      - name: device-dir
                        mountPath: /dev
                volumes:
                  - name: socket-dir
                    emptyDir: {}
                  - name: kubelet-dir
                    hostPath:
                      path: /var/lib/kubelet
                      type: Directory
                  - name: device-dir
                    hostPath:
                      path: /dev
                      type: Directory
          YAML

      - name: Run chart-testing (install)
        if: ${{ steps.detect_pr.outputs.has_pr == 'true' }}
        run: |
          ct install \
            --charts . \
            --target-branch ${{ github.event.repository.default_branch }} \
            --config .ct.yaml \
            --namespace test \
            --helm-extra-set-args "--debug --create-namespace --timeout 5m --set agent.token=${{ secrets.STGN_SECRET }} --set agent.mode=${{ matrix.mode }} ${{ matrix.extraArgs }}"

      - name: Post-install upgrade/idempotency test
        if: ${{ steps.detect_pr.outputs.has_pr == 'true' && matrix.mode == 'Sensor' }}
        run: |
          helm upgrade datafy-agent . -n test --wait --timeout 5m \
            --set agent.token=${{ secrets.STGN_SECRET }} \
            --set agent.mode=${{ matrix.mode }} \
            ${{ matrix.extraArgs }}
